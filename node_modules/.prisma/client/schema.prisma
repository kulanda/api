// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id String @id @default(uuid())

  fullName String
  username String  @unique
  phone    String  @unique
  email    String? @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Company   Company[]

  @@map("tenants")
}

enum Access {
  SELLER
  OWNER
  MANAGER
}

model User {
  id String @id @default(uuid())

  fullName String

  username String? @unique
  phone    String  @unique
  email    String  @unique
  hash     String

  access String?

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sale      Sale[]

  @@map("users")
}

model Company {
  id String @id @default(uuid())

  nif String @unique

  name    String
  address String
  logo    String

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  caeId String?
  cae   CAE?    @relation(fields: [caeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store[]

  @@map("companies")
}

model Store {
  id String @id @default(uuid())

  address     String
  designation String
  phone       String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
  Service   Service[]
  User      User[]
  Client    Client[]
  Charge    Charge[]

  @@map("stores")
}

enum CategoryType {
  PRODUCT
  SERVICE
}

model Category {
  id String @id @default(uuid())

  name        String
  description String?
  type        String?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Product             Product[]
  Service             Service[]
  Charge              Charge[]
  ChargesOnCategories ChargesOnCategories[]
  ChargesOnProducts   ChargesOnProducts[]
  ChargesOnServices   ChargesOnServices[]

  @@map("categories")
}

model Product {
  id String @id @default(uuid())

  name        String
  description String?
  image       String?
  price       Decimal
  stock       Int?
  expiresOn   DateTime

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  Charge    Charge[]

  @@map("products")
}

model Service {
  id String @id @default(uuid())

  name        String
  description String?
  image       String?
  price       Decimal

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  Charge    Charge[]

  @@map("services")
}

model Sale {
  id String @id @default(uuid())

  code Int @unique

  change   Decimal? @default(0)
  cash     Decimal?
  bankCard Decimal?

  totalPrice Decimal

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("sales")
}

model Order {
  id String @id @default(uuid())

  saleId String
  sale   Sale   @relation(fields: [saleId], references: [id])

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Sector {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  CAE       CAE[]

  @@map("sectors")
}

model CAE {
  id String @id @default(uuid())

  name String
  code Int

  sectorId String?
  sector   Sector? @relation(fields: [sectorId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Company   Company[]
  Client    Client[]

  @@map("CAEs")
}

enum ChargeType {
  TAX
  FEE
  DISCOUNT
}

model Charge {
  id String @id @default(uuid())

  name       String
  acronym    String
  percentage Decimal
  type       String

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  storeId             String
  store               Store                 @relation(fields: [storeId], references: [id])
  ChargesOnCategories ChargesOnCategories[]
  ChargesOnProducts   ChargesOnProducts[]
  ChargesOnServices   ChargesOnServices[]
  Category            Category?             @relation(fields: [categoryId], references: [id])
  categoryId          String?
  Product             Product?              @relation(fields: [productId], references: [id])
  productId           String?
  Service             Service?              @relation(fields: [serviceId], references: [id])
  serviceId           String?

  @@map("charges")
}

model ChargesOnCategories {
  id String @id @default(uuid())

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chargeId String?
  charge   Charge? @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charges_on_categories")
}

model ChargesOnProducts {
  id String @id @default(uuid())

  productId String?
  product   Category? @relation(fields: [productId], references: [id])

  chargeId String?
  charge   Charge? @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charges_on_products")
}

model ChargesOnServices {
  id String @id @default(uuid())

  serviceId String?
  service   Category? @relation(fields: [serviceId], references: [id])

  chargeId String?
  charge   Charge? @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charges_on_services")
}

model Client {
  id String @id @default(uuid())

  fullName String

  nif     String? @unique
  phone   String  @unique
  email   String? @unique
  address String

  type String

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  caeId String?
  cae   CAE?    @relation(fields: [caeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

enum ClientType {
  INDIVIDUAL
  LEGAL
}
