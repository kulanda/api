// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id String @id @default(uuid())

  fullName String
  username String  @unique
  phone    String  @unique
  email    String? @unique

  partnerId String?
  partner   User?   @relation(fields: [partnerId], references: [id])

  expiresAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Company   Company[]

  @@map("tenants")
}

enum Access {
  SELLER
  OWNER
  MANAGER
  PARTNER
  STUDENT
}

model User {
  id String @id @default(uuid())

  fullName String

  username String? @unique
  phone    String  @unique
  email    String  @unique
  hash     String

  access String

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sale      Sale[]
  Tenant    Tenant[]

  @@map("users")
}

enum VatRegimeType {
  GENERAL_REGIME
  EXCLUSION_REGIME
  SIMPLIFIED_REGIME
}

model Company {
  id String @id @default(uuid())

  nif String @unique

  name    String
  address String
  logo    String?

  fax       String? @unique
  vatRegime String

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  caeId String?
  cae   CAE?    @relation(fields: [caeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store[]

  saftExportDate DateTime?

  @@map("companies")
}

enum StoreSaleType {
  DEFAULT
  PRODUCT
  SERVICE
}

model Store {
  id String @id @default(uuid())

  address     String
  designation String
  phone       String
  globalSale  Boolean? @default(false)
  saleType    String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Product   Product[]
  Service   Service[]
  User      User[]
  Client    Client[]
  Charge    Charge[]
  Supplier  Supplier[]

  @@map("stores")
}

enum CategoryType {
  PRODUCT
  SERVICE
}

model Category {
  id String @id @default(uuid())

  name        String
  description String?
  type        String

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Product             Product[]
  Service             Service[]
  Charge              Charge[]
  ChargesOnCategories ChargesOnCategories[]
  ChargesOnProducts   ChargesOnProducts[]
  ChargesOnServices   ChargesOnServices[]

  @@map("categories")
}

model Product {
  id String @id @default(uuid())

  code Int @unique @default(autoincrement())

  name        String
  description String?
  image       String?
  price       Decimal

  withholding Boolean

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Order             Order[]
  Charge            Charge[]
  SupplierOnProduct SupplierOnProduct[]

  @@map("products")
}

enum SupplierType {
  INDIVIDUAL
  LEGAL
}

model Supplier {
  id String @id @default(uuid())

  fullName String

  nif     String? @unique
  phone   String  @unique
  email   String? @unique
  address String

  type String

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  caeId String?
  cae   CAE?    @relation(fields: [caeId], references: [id])

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SupplierOnProduct SupplierOnProduct[]

  @@map("suppliers")
}

model SupplierOnProduct {
  id String @id @default(uuid())

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suppliers_on_product")
}

model Service {
  id String @id @default(uuid())

  code Int @unique @default(autoincrement())

  name        String
  description String?
  image       String?
  price       Decimal

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  Charge    Charge[]

  @@map("services")
}

model Sale {
  id String @id @default(uuid())

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
  Invoice   Invoice[]

  @@map("sales")
}

model Order {
  id String @id @default(uuid())

  saleId String?
  sale   Sale?   @relation(fields: [saleId], references: [id])

  debitNoteId String?
  debitNote   DebitNote? @relation(fields: [debitNoteId], references: [id])

  creditNoteId String?
  creditNote   CreditNote? @relation(fields: [creditNoteId], references: [id])

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Sector {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  CAE       CAE[]

  @@map("sectors")
}

model CAE {
  id String @id @default(uuid())

  name String
  code Int

  sectorId String?
  sector   Sector? @relation(fields: [sectorId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Company   Company[]
  Client    Client[]
  Supplier  Supplier[]

  @@map("CAEs")
}

enum ChargeType {
  TAX
  FEE
  DISCOUNT
}

model Charge {
  id String @id @default(uuid())

  name       String
  acronym    String
  percentage Decimal
  type       String

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  storeId             String
  store               Store                 @relation(fields: [storeId], references: [id])
  ChargesOnCategories ChargesOnCategories[]
  ChargesOnProducts   ChargesOnProducts[]
  ChargesOnServices   ChargesOnServices[]
  Category            Category?             @relation(fields: [categoryId], references: [id])
  categoryId          String?
  Product             Product?              @relation(fields: [productId], references: [id])
  productId           String?
  Service             Service?              @relation(fields: [serviceId], references: [id])
  serviceId           String?

  @@map("charges")
}

model ChargesOnCategories {
  id String @id @default(uuid())

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chargeId String?
  charge   Charge? @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charges_on_categories")
}

model ChargesOnProducts {
  id String @id @default(uuid())

  productId String?
  product   Category? @relation(fields: [productId], references: [id])

  chargeId String?
  charge   Charge? @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charges_on_products")
}

model ChargesOnServices {
  id String @id @default(uuid())

  serviceId String?
  service   Category? @relation(fields: [serviceId], references: [id])

  chargeId String?
  charge   Charge? @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("charges_on_services")
}

enum ClientType {
  INDIVIDUAL
  LEGAL
}

model Client {
  id String @id @default(uuid())

  fullName String

  nif     String? @unique
  phone   String  @unique
  email   String? @unique
  address String

  type String

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  caeId String?
  cae   CAE?    @relation(fields: [caeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sale      Sale[]

  @@map("clients")
}

enum InvoiceStatusType {
  DRAFT
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

model Invoice {
  id String @id @default(uuid())

  number Int     @unique @default(autoincrement())
  amount Decimal
  change Decimal? @default(0)

  saleId String
  sale   Sale   @relation(fields: [saleId], references: [id])

  status String

  dueDate DateTime

  observation String?

  retention Decimal?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  digitalSignature String?
  Receipt          Receipt[]
  CreditNote       CreditNote[]
  DebitNote        DebitNote[]

  @@map("invoices")
}

enum ReceiptStatusType {
  ISSUED
  REVERSED
}

model Receipt {
  id String @id @default(uuid())

  number Int     @unique @default(autoincrement())
  amount Decimal
  change Decimal? @default(0)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  status String

  dueDate DateTime

  observation String?

  digitalSignature String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pyament   Payment[]

  @@map("receipts")
}

enum PaymentOnReceiptType {
  CASH
  DEPOSIT
  BANK_TRANSFER
  CREDIT_CARD
  MULTICAIXA_EXPRESS
}

model Payment {
  id     String  @id @default(uuid())
  amount Decimal

  receiptId String?
  receipt   Receipt? @relation(fields: [receiptId], references: [id])

  creditNoteId String?
  creditNote   CreditNote? @relation(fields: [creditNoteId], references: [id])

  debitNoteId String?
  debitNote   DebitNote? @relation(fields: [debitNoteId], references: [id])

  type String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum CreditNoteStatusType {
  DRAFT
  ISSUED
  APPLIED
  CANCELLED
}

enum DebitNoteStatusType {
  DRAFT
  ISSUED
  APPLIED
  CANCELLED
}

model CreditNote {
  id String @id @default(uuid())

  number Int     @unique @default(autoincrement())
  amount Decimal
  change Decimal? @default(0)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  status String

  dueDate DateTime

  observation String?

  retention Decimal?

  digitalSignature String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
  Payment   Payment[]

  @@map("credit_notes")
}

model DebitNote {
  id String @id @default(uuid())

  number Int     @unique @default(autoincrement())
  amount Decimal
  change Decimal? @default(0)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  status String

  dueDate DateTime

  observation String?

  retention Decimal?

  digitalSignature String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Order     Order[]
  Payment   Payment[]

  @@map("debit_notes")
}
